
3_Omni_Base.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  00000c1a  00000cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800224  00800224  00000cd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f03  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001118  00000000  00000000  00002dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bed  00000000  00000000  00003ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  00004ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b39  00000000  00000000  00004f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3e  00000000  00000000  00005a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000067b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	80 c0       	rjmp	.+256    	; 0x102 <__ctors_end>
   2:	00 00       	nop
   4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
   6:	00 00       	nop
   8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
   a:	00 00       	nop
   c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
   e:	00 00       	nop
  10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
  12:	00 00       	nop
  14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
  16:	00 00       	nop
  18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
  1e:	00 00       	nop
  20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
  22:	00 00       	nop
  24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
  26:	00 00       	nop
  28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
  2e:	00 00       	nop
  30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
  32:	00 00       	nop
  34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
  36:	00 00       	nop
  38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
  42:	00 00       	nop
  44:	7d c0       	rjmp	.+250    	; 0x140 <__bad_interrupt>
  46:	00 00       	nop
  48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
  4e:	00 00       	nop
  50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
  52:	00 00       	nop
  54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
  56:	00 00       	nop
  58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
  62:	00 00       	nop
  64:	c1 c1       	rjmp	.+898    	; 0x3e8 <__vector_25>
  66:	00 00       	nop
  68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
  6e:	00 00       	nop
  70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
  72:	00 00       	nop
  74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
  76:	00 00       	nop
  78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
  7e:	00 00       	nop
  80:	5f c0       	rjmp	.+190    	; 0x140 <__bad_interrupt>
  82:	00 00       	nop
  84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
  86:	00 00       	nop
  88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
  8e:	00 00       	nop
  90:	bb c1       	rjmp	.+886    	; 0x408 <__vector_36>
  92:	00 00       	nop
  94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
  96:	00 00       	nop
  98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
  be:	00 00       	nop
  c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ad c1       	rjmp	.+858    	; 0x428 <__vector_51>
  ce:	00 00       	nop
  d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b7 c1       	rjmp	.+878    	; 0x448 <__vector_54>
  da:	00 00       	nop
  dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
  de:	00 00       	nop
  e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	05 a8       	ldd	r0, Z+53	; 0x35
  e6:	4c cd       	rjmp	.-1384   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
  e8:	b2 d4       	rcall	.+2404   	; 0xa4e <__fp_sinus+0x6>
  ea:	4e b9       	out	0x0e, r20	; 14
  ec:	38 36       	cpi	r19, 0x68	; 104
  ee:	a9 02       	muls	r26, r25
  f0:	0c 50       	subi	r16, 0x0C	; 12
  f2:	b9 91       	ld	r27, Y+
  f4:	86 88       	ldd	r8, Z+22	; 0x16
  f6:	08 3c       	cpi	r16, 0xC8	; 200
  f8:	a6 aa       	std	Z+54, r10	; 0x36
  fa:	aa 2a       	or	r10, r26
  fc:	be 00       	.word	0x00be	; ????
  fe:	00 00       	nop
 100:	80 3f       	cpi	r24, 0xF0	; 240

00000102 <__ctors_end>:
 102:	11 24       	eor	r1, r1
 104:	1f be       	out	0x3f, r1	; 63
 106:	cf ef       	ldi	r28, 0xFF	; 255
 108:	d1 e2       	ldi	r29, 0x21	; 33
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0c bf       	out	0x3c, r16	; 60

00000112 <__do_copy_data>:
 112:	12 e0       	ldi	r17, 0x02	; 2
 114:	a0 e0       	ldi	r26, 0x00	; 0
 116:	b2 e0       	ldi	r27, 0x02	; 2
 118:	ea e1       	ldi	r30, 0x1A	; 26
 11a:	fc e0       	ldi	r31, 0x0C	; 12
 11c:	00 e0       	ldi	r16, 0x00	; 0
 11e:	0b bf       	out	0x3b, r16	; 59
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x14>
 122:	07 90       	elpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a4 32       	cpi	r26, 0x24	; 36
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0x10>

0000012c <__do_clear_bss>:
 12c:	22 e0       	ldi	r18, 0x02	; 2
 12e:	a4 e2       	ldi	r26, 0x24	; 36
 130:	b2 e0       	ldi	r27, 0x02	; 2
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a2 33       	cpi	r26, 0x32	; 50
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	02 d0       	rcall	.+4      	; 0x142 <main>
 13e:	6b c5       	rjmp	.+2774   	; 0xc16 <_exit>

00000140 <__bad_interrupt>:
 140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <main>:
#include <avr/interrupt.h>
#include "Wheel.h"
#include "headers.h"

int main(void)
{    
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	a7 97       	sbiw	r28, 0x27	; 39
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
	sei();
 156:	78 94       	sei
	
	Wheel w;
	w.init();
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	b2 d1       	rcall	.+868    	; 0x4c2 <_ZN5Wheel4initEv>
	
	
	while(1)
	{
		
		w.get_joystick_data();
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	05 d2       	rcall	.+1034   	; 0x56e <_ZN5Wheel17get_joystick_dataEv>
		w.calculate_wheel_velocity();
 164:	ce 01       	movw	r24, r28
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	55 d2       	rcall	.+1194   	; 0x614 <_ZN5Wheel24calculate_wheel_velocityEv>
		w.update_wheel_velocity();
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	ca d2       	rcall	.+1428   	; 0x704 <_ZN5Wheel21update_wheel_velocityEv>
 170:	f6 cf       	rjmp	.-20     	; 0x15e <main+0x1c>

00000172 <_ZN5Motor7InitPWMEv>:
 172:	fc 01       	movw	r30, r24

}

void Motor::InitPWM()
{
	if (num==1)
 174:	80 81       	ld	r24, Z
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	f1 f4       	brne	.+60     	; 0x1b6 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
 17a:	e7 e0       	ldi	r30, 0x07	; 7
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	80 81       	ld	r24, Z
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
 184:	80 81       	ld	r24, Z
 186:	81 60       	ori	r24, 0x01	; 1
 188:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
 18a:	ea e0       	ldi	r30, 0x0A	; 10
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	80 81       	ld	r24, Z
 190:	80 62       	ori	r24, 0x20	; 32
 192:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
 194:	e0 e2       	ldi	r30, 0x20	; 32
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	80 81       	ld	r24, Z
 19a:	8a 60       	ori	r24, 0x0A	; 10
 19c:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
 19e:	e1 e2       	ldi	r30, 0x21	; 33
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	80 81       	ld	r24, Z
 1a4:	8a 61       	ori	r24, 0x1A	; 26
 1a6:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
 1a8:	89 ef       	ldi	r24, 0xF9	; 249
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 1b0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 1b4:	08 95       	ret
	}
	else if(num==2)
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	f1 f4       	brne	.+60     	; 0x1f6 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
 1ba:	e7 e0       	ldi	r30, 0x07	; 7
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	80 81       	ld	r24, Z
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
 1c4:	80 81       	ld	r24, Z
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
 1ca:	ea e0       	ldi	r30, 0x0A	; 10
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	80 81       	ld	r24, Z
 1d0:	88 60       	ori	r24, 0x08	; 8
 1d2:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
 1d4:	e0 e2       	ldi	r30, 0x20	; 32
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	80 81       	ld	r24, Z
 1da:	82 68       	ori	r24, 0x82	; 130
 1dc:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
 1de:	e1 e2       	ldi	r30, 0x21	; 33
 1e0:	f1 e0       	ldi	r31, 0x01	; 1
 1e2:	80 81       	ld	r24, Z
 1e4:	8a 61       	ori	r24, 0x1A	; 26
 1e6:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
 1e8:	89 ef       	ldi	r24, 0xF9	; 249
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 1f0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 1f4:	08 95       	ret
	}
	else if(num==3)
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	e9 f4       	brne	.+58     	; 0x234 <_ZN5Motor7InitPWMEv+0xc2>
	{
		OUTPUT(DD_F3);
 1fa:	e7 e0       	ldi	r30, 0x07	; 7
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	80 81       	ld	r24, Z
 200:	80 62       	ori	r24, 0x20	; 32
 202:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
 204:	80 81       	ld	r24, Z
 206:	80 61       	ori	r24, 0x10	; 16
 208:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
 20a:	ea e0       	ldi	r30, 0x0A	; 10
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	80 81       	ld	r24, Z
 210:	80 61       	ori	r24, 0x10	; 16
 212:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
 214:	e0 e2       	ldi	r30, 0x20	; 32
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	80 81       	ld	r24, Z
 21a:	82 62       	ori	r24, 0x22	; 34
 21c:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
 21e:	e1 e2       	ldi	r30, 0x21	; 33
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	80 81       	ld	r24, Z
 224:	8a 61       	ori	r24, 0x1A	; 26
 226:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
 228:	89 ef       	ldi	r24, 0xF9	; 249
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 230:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 234:	08 95       	ret

00000236 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	69 f0       	breq	.+26     	; 0x258 <_ZN5Motor19SetForwardDirectionEv+0x22>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	a1 f0       	breq	.+40     	; 0x26a <_ZN5Motor19SetForwardDirectionEv+0x34>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	d1 f4       	brne	.+52     	; 0x27a <_ZN5Motor19SetForwardDirectionEv+0x44>
	{
		case 1:
			SET		(DD_F1);
 246:	e8 e0       	ldi	r30, 0x08	; 8
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
 250:	80 81       	ld	r24, Z
 252:	8e 7f       	andi	r24, 0xFE	; 254
 254:	80 83       	st	Z, r24
			break;
 256:	08 95       	ret
		case 2:
			SET		(DD_F2);
 258:	e8 e0       	ldi	r30, 0x08	; 8
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	80 81       	ld	r24, Z
 25e:	84 60       	ori	r24, 0x04	; 4
 260:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
 262:	80 81       	ld	r24, Z
 264:	87 7f       	andi	r24, 0xF7	; 247
 266:	80 83       	st	Z, r24
			break;
 268:	08 95       	ret
		case 3:
			SET		(DD_F3);
 26a:	e8 e0       	ldi	r30, 0x08	; 8
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	80 81       	ld	r24, Z
 270:	80 62       	ori	r24, 0x20	; 32
 272:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
 274:	80 81       	ld	r24, Z
 276:	8f 7e       	andi	r24, 0xEF	; 239
 278:	80 83       	st	Z, r24
 27a:	08 95       	ret

0000027c <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	69 f0       	breq	.+26     	; 0x29e <_ZN5Motor19SetReverseDirectionEv+0x22>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	a1 f0       	breq	.+40     	; 0x2b0 <_ZN5Motor19SetReverseDirectionEv+0x34>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	d1 f4       	brne	.+52     	; 0x2c0 <_ZN5Motor19SetReverseDirectionEv+0x44>
	{
		case 1:
			CLEAR	(DD_F1);
 28c:	e8 e0       	ldi	r30, 0x08	; 8
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	80 81       	ld	r24, Z
 292:	8d 7f       	andi	r24, 0xFD	; 253
 294:	80 83       	st	Z, r24
			SET		(DD_B1);
 296:	80 81       	ld	r24, Z
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	80 83       	st	Z, r24
			break;
 29c:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
 29e:	e8 e0       	ldi	r30, 0x08	; 8
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	80 81       	ld	r24, Z
 2a4:	8b 7f       	andi	r24, 0xFB	; 251
 2a6:	80 83       	st	Z, r24
			SET		(DD_B2);
 2a8:	80 81       	ld	r24, Z
 2aa:	88 60       	ori	r24, 0x08	; 8
 2ac:	80 83       	st	Z, r24
			break;
 2ae:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
 2b0:	e8 e0       	ldi	r30, 0x08	; 8
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	80 81       	ld	r24, Z
 2b6:	8f 7d       	andi	r24, 0xDF	; 223
 2b8:	80 83       	st	Z, r24
			SET		(DD_B3);
 2ba:	80 81       	ld	r24, Z
 2bc:	80 61       	ori	r24, 0x10	; 16
 2be:	80 83       	st	Z, r24
 2c0:	08 95       	ret

000002c2 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
 2c2:	fc 01       	movw	r30, r24
 2c4:	80 81       	ld	r24, Z
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	89 f0       	breq	.+34     	; 0x2ec <_ZN5Motor9StopMotorEv+0x2a>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	e1 f0       	breq	.+56     	; 0x306 <_ZN5Motor9StopMotorEv+0x44>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	31 f5       	brne	.+76     	; 0x31e <_ZN5Motor9StopMotorEv+0x5c>
	{
		case 1:
			CLEAR	(DD_F1);
 2d2:	e8 e0       	ldi	r30, 0x08	; 8
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	80 81       	ld	r24, Z
 2d8:	8d 7f       	andi	r24, 0xFD	; 253
 2da:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
 2dc:	80 81       	ld	r24, Z
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
 2e2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 2e6:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
 2ea:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
 2ec:	e8 e0       	ldi	r30, 0x08	; 8
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	80 81       	ld	r24, Z
 2f2:	8b 7f       	andi	r24, 0xFB	; 251
 2f4:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
 2f6:	80 81       	ld	r24, Z
 2f8:	87 7f       	andi	r24, 0xF7	; 247
 2fa:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
 2fc:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 300:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
 304:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
 306:	e8 e0       	ldi	r30, 0x08	; 8
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	80 81       	ld	r24, Z
 30c:	8f 7d       	andi	r24, 0xDF	; 223
 30e:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
 310:	80 81       	ld	r24, Z
 312:	8f 7e       	andi	r24, 0xEF	; 239
 314:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
 316:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 31a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 31e:	08 95       	ret

00000320 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	8c 01       	movw	r16, r24
 32a:	eb 01       	movw	r28, r22
    if (Ocr > 0)
 32c:	1c 16       	cp	r1, r28
 32e:	1d 06       	cpc	r1, r29
 330:	0c f4       	brge	.+2      	; 0x334 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
 332:	81 df       	rcall	.-254    	; 0x236 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
 334:	c9 3f       	cpi	r28, 0xF9	; 249
 336:	d1 05       	cpc	r29, r1
 338:	44 f4       	brge	.+16     	; 0x34a <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	if( Ocr < 0)
 33a:	dd 23       	and	r29, r29
 33c:	44 f4       	brge	.+16     	; 0x34e <_ZN5Motor11SetOcrValueEi+0x2e>
	{
        Ocr = -Ocr;
 33e:	d1 95       	neg	r29
 340:	c1 95       	neg	r28
 342:	d1 09       	sbc	r29, r1
        SetReverseDirection();
 344:	c8 01       	movw	r24, r16
 346:	9a df       	rcall	.-204    	; 0x27c <_ZN5Motor19SetReverseDirectionEv>
 348:	02 c0       	rjmp	.+4      	; 0x34e <_ZN5Motor11SetOcrValueEi+0x2e>
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
 34a:	c9 ef       	ldi	r28, 0xF9	; 249
 34c:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
 34e:	f8 01       	movw	r30, r16
 350:	80 81       	ld	r24, Z
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	49 f0       	breq	.+18     	; 0x368 <_ZN5Motor11SetOcrValueEi+0x48>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	61 f0       	breq	.+24     	; 0x372 <_ZN5Motor11SetOcrValueEi+0x52>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	71 f4       	brne	.+28     	; 0x37a <_ZN5Motor11SetOcrValueEi+0x5a>
	{
		case 1:
			PWM_OCR1	= Ocr;
 35e:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 362:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
 366:	09 c0       	rjmp	.+18     	; 0x37a <_ZN5Motor11SetOcrValueEi+0x5a>
		case 2:
			PWM_OCR2	= Ocr;
 368:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 36c:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
 370:	04 c0       	rjmp	.+8      	; 0x37a <_ZN5Motor11SetOcrValueEi+0x5a>
		case 3:
			PWM_OCR3	= Ocr;
 372:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 376:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
	}
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ec 01       	movw	r28, r24
	num = no;
 38a:	68 83       	st	Y, r22
	InitPWM();
 38c:	f2 de       	rcall	.-540    	; 0x172 <_ZN5Motor7InitPWMEv>

	StopMotor();
 38e:	ce 01       	movw	r24, r28
 390:	98 df       	rcall	.-208    	; 0x2c2 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	ce 01       	movw	r24, r28
 398:	c3 df       	rcall	.-122    	; 0x320 <_ZN5Motor11SetOcrValueEi>

}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
 3a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 3a4:	87 e6       	ldi	r24, 0x67	; 103
 3a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 3aa:	88 e9       	ldi	r24, 0x98	; 152
 3ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 3b0:	86 e0       	ldi	r24, 0x06	; 6
 3b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 3b6:	08 95       	ret

000003b8 <_Z9initUART3v>:
 3b8:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <_ZL9datacount>
 3bc:	e6 e2       	ldi	r30, 0x26	; 38
 3be:	f2 e0       	ldi	r31, 0x02	; 2
 3c0:	11 82       	std	Z+1, r1	; 0x01
 3c2:	10 82       	st	Z, r1
 3c4:	13 82       	std	Z+3, r1	; 0x03
 3c6:	12 82       	std	Z+2, r1	; 0x02
 3c8:	15 82       	std	Z+5, r1	; 0x05
 3ca:	14 82       	std	Z+4, r1	; 0x04
 3cc:	17 82       	std	Z+7, r1	; 0x07
 3ce:	16 82       	std	Z+6, r1	; 0x06
 3d0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
 3d4:	87 e6       	ldi	r24, 0x67	; 103
 3d6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
 3da:	88 e9       	ldi	r24, 0x98	; 152
 3dc:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
 3e0:	86 e0       	ldi	r24, 0x06	; 6
 3e2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
 3e6:	08 95       	ret

000003e8 <__vector_25>:

ISR(USART0_RX_vect)
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	8f 93       	push	r24
	buffer=UDR0;
 3f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 3f8:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <buffer>
}
 3fc:	8f 91       	pop	r24
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <__vector_36>:

ISR(USART1_RX_vect)
{
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	8f 93       	push	r24
	buffer1=UDR1;
 414:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 418:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <buffer1>
	
}
 41c:	8f 91       	pop	r24
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <__vector_51>:

ISR(USART2_RX_vect)
{
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	8f 93       	push	r24
	buffer2=UDR2;
 434:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 438:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <buffer2>
}
 43c:	8f 91       	pop	r24
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_54>:


ISR(USART3_RX_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	0b b6       	in	r0, 0x3b	; 59
 454:	0f 92       	push	r0
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
	buffer3=UDR3;
 462:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 466:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <buffer3>
	
	if(rcvflag)
 46a:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <__data_end>
 46e:	99 23       	and	r25, r25
 470:	b1 f0       	breq	.+44     	; 0x49e <__vector_54+0x56>
	{
		rcvdata[datacount] = buffer3;
 472:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <_ZL9datacount>
 476:	e9 2f       	mov	r30, r25
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	ea 5d       	subi	r30, 0xDA	; 218
 480:	fd 4f       	sbci	r31, 0xFD	; 253
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	31 83       	std	Z+1, r19	; 0x01
 488:	20 83       	st	Z, r18
		datacount++;
 48a:	9f 5f       	subi	r25, 0xFF	; 255
		if(datacount >= DATA_NOS)
 48c:	94 30       	cpi	r25, 0x04	; 4
 48e:	18 f4       	brcc	.+6      	; 0x496 <__vector_54+0x4e>
	buffer3=UDR3;
	
	if(rcvflag)
	{
		rcvdata[datacount] = buffer3;
		datacount++;
 490:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <_ZL9datacount>
 494:	04 c0       	rjmp	.+8      	; 0x49e <__vector_54+0x56>
		if(datacount >= DATA_NOS)
		{
			datacount=0;
 496:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <_ZL9datacount>
			rcvflag = false;
 49a:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
		}
		
	}
	if(buffer3==START_BYTE)
 49e:	8f 37       	cpi	r24, 0x7F	; 127
 4a0:	19 f4       	brne	.+6      	; 0x4a8 <__vector_54+0x60>
		rcvflag=true;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0b be       	out	0x3b, r0	; 59
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <_ZN5Wheel4initEv>:
}

void Wheel::reset_robvel()
{
	for(int i=0;i<3;i++)
		velocity_robot[i] = 0;
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ec 01       	movw	r28, r24
 4c8:	78 94       	sei
 4ca:	6a df       	rcall	.-300    	; 0x3a0 <_Z9initUART0v>
 4cc:	75 df       	rcall	.-278    	; 0x3b8 <_Z9initUART3v>
 4ce:	88 ec       	ldi	r24, 0xC8	; 200
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	9d 87       	std	Y+13, r25	; 0x0d
 4d4:	8c 87       	std	Y+12, r24	; 0x0c
 4d6:	fe 01       	movw	r30, r28
 4d8:	ce 01       	movw	r24, r28
 4da:	0c 96       	adiw	r24, 0x0c	; 12
 4dc:	16 86       	std	Z+14, r1	; 0x0e
 4de:	17 86       	std	Z+15, r1	; 0x0f
 4e0:	10 8a       	std	Z+16, r1	; 0x10
 4e2:	11 8a       	std	Z+17, r1	; 0x11
 4e4:	11 92       	st	Z+, r1
 4e6:	11 92       	st	Z+, r1
 4e8:	11 92       	st	Z+, r1
 4ea:	11 92       	st	Z+, r1
 4ec:	e8 17       	cp	r30, r24
 4ee:	f9 07       	cpc	r31, r25
 4f0:	a9 f7       	brne	.-22     	; 0x4dc <_ZN5Wheel4initEv+0x1a>
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	ce 01       	movw	r24, r28
 4f6:	80 96       	adiw	r24, 0x20	; 32
 4f8:	45 df       	rcall	.-374    	; 0x384 <_ZN5Motor10InitialiseEh>
 4fa:	62 e0       	ldi	r22, 0x02	; 2
 4fc:	ce 01       	movw	r24, r28
 4fe:	81 96       	adiw	r24, 0x21	; 33
 500:	41 df       	rcall	.-382    	; 0x384 <_ZN5Motor10InitialiseEh>
 502:	63 e0       	ldi	r22, 0x03	; 3
 504:	ce 01       	movw	r24, r28
 506:	82 96       	adiw	r24, 0x22	; 34
 508:	3d df       	rcall	.-390    	; 0x384 <_ZN5Motor10InitialiseEh>
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <_ZN5Wheel15preprocess_dataEv>:
 510:	e6 e2       	ldi	r30, 0x26	; 38
 512:	f2 e0       	ldi	r31, 0x02	; 2
 514:	40 81       	ld	r20, Z
 516:	51 81       	ldd	r21, Z+1	; 0x01
 518:	22 81       	ldd	r18, Z+2	; 0x02
 51a:	33 81       	ldd	r19, Z+3	; 0x03
 51c:	42 17       	cp	r20, r18
 51e:	53 07       	cpc	r21, r19
 520:	34 f0       	brlt	.+12     	; 0x52e <_ZN5Wheel15preprocess_dataEv+0x1e>
 522:	24 0f       	add	r18, r20
 524:	35 1f       	adc	r19, r21
 526:	fc 01       	movw	r30, r24
 528:	34 a3       	std	Z+36, r19	; 0x24
 52a:	23 a3       	std	Z+35, r18	; 0x23
 52c:	08 c0       	rjmp	.+16     	; 0x53e <_ZN5Wheel15preprocess_dataEv+0x2e>
 52e:	24 0f       	add	r18, r20
 530:	35 1f       	adc	r19, r21
 532:	31 95       	neg	r19
 534:	21 95       	neg	r18
 536:	31 09       	sbc	r19, r1
 538:	fc 01       	movw	r30, r24
 53a:	34 a3       	std	Z+36, r19	; 0x24
 53c:	23 a3       	std	Z+35, r18	; 0x23
 53e:	e6 e2       	ldi	r30, 0x26	; 38
 540:	f2 e0       	ldi	r31, 0x02	; 2
 542:	44 81       	ldd	r20, Z+4	; 0x04
 544:	55 81       	ldd	r21, Z+5	; 0x05
 546:	26 81       	ldd	r18, Z+6	; 0x06
 548:	37 81       	ldd	r19, Z+7	; 0x07
 54a:	42 17       	cp	r20, r18
 54c:	53 07       	cpc	r21, r19
 54e:	34 f0       	brlt	.+12     	; 0x55c <_ZN5Wheel15preprocess_dataEv+0x4c>
 550:	24 0f       	add	r18, r20
 552:	35 1f       	adc	r19, r21
 554:	fc 01       	movw	r30, r24
 556:	36 a3       	std	Z+38, r19	; 0x26
 558:	25 a3       	std	Z+37, r18	; 0x25
 55a:	08 95       	ret
 55c:	24 0f       	add	r18, r20
 55e:	35 1f       	adc	r19, r21
 560:	31 95       	neg	r19
 562:	21 95       	neg	r18
 564:	31 09       	sbc	r19, r1
 566:	fc 01       	movw	r30, r24
 568:	36 a3       	std	Z+38, r19	; 0x26
 56a:	25 a3       	std	Z+37, r18	; 0x25
 56c:	08 95       	ret

0000056e <_ZN5Wheel17get_joystick_dataEv>:
}

void Wheel::get_joystick_data()
{
 56e:	8f 92       	push	r8
 570:	9f 92       	push	r9
 572:	af 92       	push	r10
 574:	bf 92       	push	r11
 576:	cf 92       	push	r12
 578:	df 92       	push	r13
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	8c 01       	movw	r16, r24
			reset_robvel();
			break;
	}*/
	
	
	if(!rcvflag)
 588:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
 58c:	81 11       	cpse	r24, r1
 58e:	02 c0       	rjmp	.+4      	; 0x594 <_ZN5Wheel17get_joystick_dataEv+0x26>
		preprocess_data();
 590:	c8 01       	movw	r24, r16
 592:	be df       	rcall	.-132    	; 0x510 <_ZN5Wheel15preprocess_dataEv>
	
	velocity_robot[1] = robot_rpm * cos(azimuth);
 594:	f8 01       	movw	r30, r16
 596:	c4 85       	ldd	r28, Z+12	; 0x0c
 598:	d5 85       	ldd	r29, Z+13	; 0x0d
 59a:	63 a1       	ldd	r22, Z+35	; 0x23
 59c:	74 a1       	ldd	r23, Z+36	; 0x24
 59e:	07 2e       	mov	r0, r23
 5a0:	00 0c       	add	r0, r0
 5a2:	88 0b       	sbc	r24, r24
 5a4:	99 0b       	sbc	r25, r25
 5a6:	c5 d1       	rcall	.+906    	; 0x932 <__floatsisf>
 5a8:	6b 01       	movw	r12, r22
 5aa:	7c 01       	movw	r14, r24
 5ac:	24 d1       	rcall	.+584    	; 0x7f6 <cos>
 5ae:	4b 01       	movw	r8, r22
 5b0:	5c 01       	movw	r10, r24
 5b2:	be 01       	movw	r22, r28
 5b4:	0d 2e       	mov	r0, r29
 5b6:	00 0c       	add	r0, r0
 5b8:	88 0b       	sbc	r24, r24
 5ba:	99 0b       	sbc	r25, r25
 5bc:	ba d1       	rcall	.+884    	; 0x932 <__floatsisf>
 5be:	a5 01       	movw	r20, r10
 5c0:	94 01       	movw	r18, r8
 5c2:	7c d2       	rcall	.+1272   	; 0xabc <__mulsf3>
 5c4:	f8 01       	movw	r30, r16
 5c6:	64 83       	std	Z+4, r22	; 0x04
 5c8:	75 83       	std	Z+5, r23	; 0x05
 5ca:	86 83       	std	Z+6, r24	; 0x06
 5cc:	97 83       	std	Z+7, r25	; 0x07
	velocity_robot[0] = -robot_rpm * sin(azimuth);
 5ce:	c7 01       	movw	r24, r14
 5d0:	b6 01       	movw	r22, r12
 5d2:	d7 d2       	rcall	.+1454   	; 0xb82 <sin>
 5d4:	6b 01       	movw	r12, r22
 5d6:	7c 01       	movw	r14, r24
 5d8:	66 27       	eor	r22, r22
 5da:	77 27       	eor	r23, r23
 5dc:	6c 1b       	sub	r22, r28
 5de:	7d 0b       	sbc	r23, r29
 5e0:	07 2e       	mov	r0, r23
 5e2:	00 0c       	add	r0, r0
 5e4:	88 0b       	sbc	r24, r24
 5e6:	99 0b       	sbc	r25, r25
 5e8:	a4 d1       	rcall	.+840    	; 0x932 <__floatsisf>
 5ea:	a7 01       	movw	r20, r14
 5ec:	96 01       	movw	r18, r12
 5ee:	66 d2       	rcall	.+1228   	; 0xabc <__mulsf3>
 5f0:	f8 01       	movw	r30, r16
 5f2:	60 83       	st	Z, r22
 5f4:	71 83       	std	Z+1, r23	; 0x01
 5f6:	82 83       	std	Z+2, r24	; 0x02
 5f8:	93 83       	std	Z+3, r25	; 0x03
 5fa:	df 91       	pop	r29
	
	
}
 5fc:	cf 91       	pop	r28
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	ff 90       	pop	r15
 604:	ef 90       	pop	r14
 606:	df 90       	pop	r13
 608:	cf 90       	pop	r12
 60a:	bf 90       	pop	r11
 60c:	af 90       	pop	r10
 60e:	9f 90       	pop	r9
 610:	8f 90       	pop	r8
 612:	08 95       	ret

00000614 <_ZN5Wheel24calculate_wheel_velocityEv>:
 614:	4f 92       	push	r4

void Wheel::calculate_wheel_velocity()
{
 616:	5f 92       	push	r5
 618:	6f 92       	push	r6
 61a:	7f 92       	push	r7
 61c:	8f 92       	push	r8
 61e:	9f 92       	push	r9
 620:	af 92       	push	r10
 622:	bf 92       	push	r11
 624:	cf 92       	push	r12
 626:	df 92       	push	r13
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	3c 01       	movw	r6, r24
 636:	48 2e       	mov	r4, r24
 638:	57 2c       	mov	r5, r7
 63a:	0f 2e       	mov	r0, r31
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	8f 2e       	mov	r8, r31
 640:	f2 e0       	ldi	r31, 0x02	; 2
 642:	9f 2e       	mov	r9, r31
 644:	f0 2d       	mov	r31, r0
 646:	5c 01       	movw	r10, r24
 648:	8c e0       	ldi	r24, 0x0C	; 12
 64a:	a8 0e       	add	r10, r24
 64c:	b1 1c       	adc	r11, r1
 64e:	63 01       	movw	r12, r6
 650:	76 01       	movw	r14, r12
	
    for(int i=0;i<3;i++)
    {
        velocity_motor[i] = 0;
 652:	f6 01       	movw	r30, r12
 654:	16 86       	std	Z+14, r1	; 0x0e
 656:	17 86       	std	Z+15, r1	; 0x0f
 658:	10 8a       	std	Z+16, r1	; 0x10
 65a:	11 8a       	std	Z+17, r1	; 0x11
 65c:	84 01       	movw	r16, r8
 65e:	c4 2d       	mov	r28, r4
 660:	d5 2d       	mov	r29, r5
        for(int j=0;j<3;j++)
        {
             velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
 662:	69 91       	ld	r22, Y+
 664:	79 91       	ld	r23, Y+
 666:	89 91       	ld	r24, Y+
 668:	99 91       	ld	r25, Y+
 66a:	f8 01       	movw	r30, r16
 66c:	21 91       	ld	r18, Z+
 66e:	31 91       	ld	r19, Z+
 670:	41 91       	ld	r20, Z+
 672:	51 91       	ld	r21, Z+
 674:	8f 01       	movw	r16, r30
 676:	22 d2       	rcall	.+1092   	; 0xabc <__mulsf3>
 678:	9b 01       	movw	r18, r22
 67a:	ac 01       	movw	r20, r24
 67c:	f7 01       	movw	r30, r14
 67e:	66 85       	ldd	r22, Z+14	; 0x0e
 680:	77 85       	ldd	r23, Z+15	; 0x0f
 682:	80 89       	ldd	r24, Z+16	; 0x10
 684:	91 89       	ldd	r25, Z+17	; 0x11
 686:	53 d0       	rcall	.+166    	; 0x72e <__addsf3>
 688:	f7 01       	movw	r30, r14
 68a:	66 87       	std	Z+14, r22	; 0x0e
 68c:	77 87       	std	Z+15, r23	; 0x0f
 68e:	80 8b       	std	Z+16, r24	; 0x10
 690:	91 8b       	std	Z+17, r25	; 0x11
{
	
    for(int i=0;i<3;i++)
    {
        velocity_motor[i] = 0;
        for(int j=0;j<3;j++)
 692:	ca 15       	cp	r28, r10
 694:	db 05       	cpc	r29, r11
 696:	29 f7       	brne	.-54     	; 0x662 <_ZN5Wheel24calculate_wheel_velocityEv+0x4e>
 698:	f4 e0       	ldi	r31, 0x04	; 4
 69a:	cf 0e       	add	r12, r31
 69c:	d1 1c       	adc	r13, r1
 69e:	8c e0       	ldi	r24, 0x0C	; 12
 6a0:	88 0e       	add	r8, r24
 6a2:	91 1c       	adc	r9, r1
}

void Wheel::calculate_wheel_velocity()
{
	
    for(int i=0;i<3;i++)
 6a4:	ca 14       	cp	r12, r10
 6a6:	db 04       	cpc	r13, r11
 6a8:	99 f6       	brne	.-90     	; 0x650 <_ZN5Wheel24calculate_wheel_velocityEv+0x3c>
 6aa:	e3 01       	movw	r28, r6
 6ac:	2e 96       	adiw	r28, 0x0e	; 14
 6ae:	ea e1       	ldi	r30, 0x1A	; 26
 6b0:	6e 0e       	add	r6, r30
 6b2:	71 1c       	adc	r7, r1
 6b4:	83 01       	movw	r16, r6
             velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
        }
    }
    for(int i=0;i<3;i++)
    {
        ocr_motor[i] = (249.0*velocity_motor[i]/(MAX_RPM));//multiply by icr_top value 
 6b6:	69 91       	ld	r22, Y+
 6b8:	79 91       	ld	r23, Y+
 6ba:	89 91       	ld	r24, Y+
 6bc:	99 91       	ld	r25, Y+
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	49 e7       	ldi	r20, 0x79	; 121
 6c4:	53 e4       	ldi	r21, 0x43	; 67
 6c6:	fa d1       	rcall	.+1012   	; 0xabc <__mulsf3>
 6c8:	20 e0       	ldi	r18, 0x00	; 0
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	48 ec       	ldi	r20, 0xC8	; 200
 6ce:	53 e4       	ldi	r21, 0x43	; 67
 6d0:	95 d0       	rcall	.+298    	; 0x7fc <__divsf3>
 6d2:	fc d0       	rcall	.+504    	; 0x8cc <__fixsfsi>
 6d4:	f8 01       	movw	r30, r16
 6d6:	61 93       	st	Z+, r22
 6d8:	71 93       	st	Z+, r23
 6da:	8f 01       	movw	r16, r30
        for(int j=0;j<3;j++)
        {
             velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
        }
    }
    for(int i=0;i<3;i++)
 6dc:	c6 15       	cp	r28, r6
 6de:	d7 05       	cpc	r29, r7
 6e0:	51 f7       	brne	.-44     	; 0x6b6 <_ZN5Wheel24calculate_wheel_velocityEv+0xa2>
    {
        ocr_motor[i] = (249.0*velocity_motor[i]/(MAX_RPM));//multiply by icr_top value 
    }
}
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	0f 91       	pop	r16
 6ea:	ff 90       	pop	r15
 6ec:	ef 90       	pop	r14
 6ee:	df 90       	pop	r13
 6f0:	cf 90       	pop	r12
 6f2:	bf 90       	pop	r11
 6f4:	af 90       	pop	r10
 6f6:	9f 90       	pop	r9
 6f8:	8f 90       	pop	r8
 6fa:	7f 90       	pop	r7
 6fc:	6f 90       	pop	r6
 6fe:	5f 90       	pop	r5
 700:	4f 90       	pop	r4
 702:	08 95       	ret

00000704 <_ZN5Wheel21update_wheel_velocityEv>:

void Wheel::update_wheel_velocity()
{
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	ec 01       	movw	r28, r24
    m1.SetOcrValue(ocr_motor[0]);
 70a:	6a 8d       	ldd	r22, Y+26	; 0x1a
 70c:	7b 8d       	ldd	r23, Y+27	; 0x1b
 70e:	80 96       	adiw	r24, 0x20	; 32
 710:	07 de       	rcall	.-1010   	; 0x320 <_ZN5Motor11SetOcrValueEi>
    m2.SetOcrValue(ocr_motor[1]);
 712:	6c 8d       	ldd	r22, Y+28	; 0x1c
 714:	7d 8d       	ldd	r23, Y+29	; 0x1d
 716:	ce 01       	movw	r24, r28
 718:	81 96       	adiw	r24, 0x21	; 33
 71a:	02 de       	rcall	.-1020   	; 0x320 <_ZN5Motor11SetOcrValueEi>
    m3.SetOcrValue(ocr_motor[2]);
 71c:	6e 8d       	ldd	r22, Y+30	; 0x1e
 71e:	7f 8d       	ldd	r23, Y+31	; 0x1f
 720:	ce 01       	movw	r24, r28
 722:	82 96       	adiw	r24, 0x22	; 34
 724:	fd dd       	rcall	.-1030   	; 0x320 <_ZN5Motor11SetOcrValueEi>
}
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <__subsf3>:
 72c:	50 58       	subi	r21, 0x80	; 128

0000072e <__addsf3>:
 72e:	bb 27       	eor	r27, r27
 730:	aa 27       	eor	r26, r26
 732:	0e d0       	rcall	.+28     	; 0x750 <__addsf3x>
 734:	78 c1       	rjmp	.+752    	; 0xa26 <__fp_round>
 736:	41 d1       	rcall	.+642    	; 0x9ba <__fp_pscA>
 738:	30 f0       	brcs	.+12     	; 0x746 <__addsf3+0x18>
 73a:	46 d1       	rcall	.+652    	; 0x9c8 <__fp_pscB>
 73c:	20 f0       	brcs	.+8      	; 0x746 <__addsf3+0x18>
 73e:	31 f4       	brne	.+12     	; 0x74c <__addsf3+0x1e>
 740:	9f 3f       	cpi	r25, 0xFF	; 255
 742:	11 f4       	brne	.+4      	; 0x748 <__addsf3+0x1a>
 744:	1e f4       	brtc	.+6      	; 0x74c <__addsf3+0x1e>
 746:	36 c1       	rjmp	.+620    	; 0x9b4 <__fp_nan>
 748:	0e f4       	brtc	.+2      	; 0x74c <__addsf3+0x1e>
 74a:	e0 95       	com	r30
 74c:	e7 fb       	bst	r30, 7
 74e:	2c c1       	rjmp	.+600    	; 0x9a8 <__fp_inf>

00000750 <__addsf3x>:
 750:	e9 2f       	mov	r30, r25
 752:	8b d1       	rcall	.+790    	; 0xa6a <__fp_split3>
 754:	80 f3       	brcs	.-32     	; 0x736 <__addsf3+0x8>
 756:	ba 17       	cp	r27, r26
 758:	62 07       	cpc	r22, r18
 75a:	73 07       	cpc	r23, r19
 75c:	84 07       	cpc	r24, r20
 75e:	95 07       	cpc	r25, r21
 760:	18 f0       	brcs	.+6      	; 0x768 <__addsf3x+0x18>
 762:	71 f4       	brne	.+28     	; 0x780 <__addsf3x+0x30>
 764:	9e f5       	brtc	.+102    	; 0x7cc <__addsf3x+0x7c>
 766:	a3 c1       	rjmp	.+838    	; 0xaae <__fp_zero>
 768:	0e f4       	brtc	.+2      	; 0x76c <__addsf3x+0x1c>
 76a:	e0 95       	com	r30
 76c:	0b 2e       	mov	r0, r27
 76e:	ba 2f       	mov	r27, r26
 770:	a0 2d       	mov	r26, r0
 772:	0b 01       	movw	r0, r22
 774:	b9 01       	movw	r22, r18
 776:	90 01       	movw	r18, r0
 778:	0c 01       	movw	r0, r24
 77a:	ca 01       	movw	r24, r20
 77c:	a0 01       	movw	r20, r0
 77e:	11 24       	eor	r1, r1
 780:	ff 27       	eor	r31, r31
 782:	59 1b       	sub	r21, r25
 784:	99 f0       	breq	.+38     	; 0x7ac <__addsf3x+0x5c>
 786:	59 3f       	cpi	r21, 0xF9	; 249
 788:	50 f4       	brcc	.+20     	; 0x79e <__addsf3x+0x4e>
 78a:	50 3e       	cpi	r21, 0xE0	; 224
 78c:	68 f1       	brcs	.+90     	; 0x7e8 <__addsf3x+0x98>
 78e:	1a 16       	cp	r1, r26
 790:	f0 40       	sbci	r31, 0x00	; 0
 792:	a2 2f       	mov	r26, r18
 794:	23 2f       	mov	r18, r19
 796:	34 2f       	mov	r19, r20
 798:	44 27       	eor	r20, r20
 79a:	58 5f       	subi	r21, 0xF8	; 248
 79c:	f3 cf       	rjmp	.-26     	; 0x784 <__addsf3x+0x34>
 79e:	46 95       	lsr	r20
 7a0:	37 95       	ror	r19
 7a2:	27 95       	ror	r18
 7a4:	a7 95       	ror	r26
 7a6:	f0 40       	sbci	r31, 0x00	; 0
 7a8:	53 95       	inc	r21
 7aa:	c9 f7       	brne	.-14     	; 0x79e <__addsf3x+0x4e>
 7ac:	7e f4       	brtc	.+30     	; 0x7cc <__addsf3x+0x7c>
 7ae:	1f 16       	cp	r1, r31
 7b0:	ba 0b       	sbc	r27, r26
 7b2:	62 0b       	sbc	r22, r18
 7b4:	73 0b       	sbc	r23, r19
 7b6:	84 0b       	sbc	r24, r20
 7b8:	ba f0       	brmi	.+46     	; 0x7e8 <__addsf3x+0x98>
 7ba:	91 50       	subi	r25, 0x01	; 1
 7bc:	a1 f0       	breq	.+40     	; 0x7e6 <__addsf3x+0x96>
 7be:	ff 0f       	add	r31, r31
 7c0:	bb 1f       	adc	r27, r27
 7c2:	66 1f       	adc	r22, r22
 7c4:	77 1f       	adc	r23, r23
 7c6:	88 1f       	adc	r24, r24
 7c8:	c2 f7       	brpl	.-16     	; 0x7ba <__addsf3x+0x6a>
 7ca:	0e c0       	rjmp	.+28     	; 0x7e8 <__addsf3x+0x98>
 7cc:	ba 0f       	add	r27, r26
 7ce:	62 1f       	adc	r22, r18
 7d0:	73 1f       	adc	r23, r19
 7d2:	84 1f       	adc	r24, r20
 7d4:	48 f4       	brcc	.+18     	; 0x7e8 <__addsf3x+0x98>
 7d6:	87 95       	ror	r24
 7d8:	77 95       	ror	r23
 7da:	67 95       	ror	r22
 7dc:	b7 95       	ror	r27
 7de:	f7 95       	ror	r31
 7e0:	9e 3f       	cpi	r25, 0xFE	; 254
 7e2:	08 f0       	brcs	.+2      	; 0x7e6 <__addsf3x+0x96>
 7e4:	b3 cf       	rjmp	.-154    	; 0x74c <__addsf3+0x1e>
 7e6:	93 95       	inc	r25
 7e8:	88 0f       	add	r24, r24
 7ea:	08 f0       	brcs	.+2      	; 0x7ee <__addsf3x+0x9e>
 7ec:	99 27       	eor	r25, r25
 7ee:	ee 0f       	add	r30, r30
 7f0:	97 95       	ror	r25
 7f2:	87 95       	ror	r24
 7f4:	08 95       	ret

000007f6 <cos>:
 7f6:	f0 d0       	rcall	.+480    	; 0x9d8 <__fp_rempio2>
 7f8:	e3 95       	inc	r30
 7fa:	26 c1       	rjmp	.+588    	; 0xa48 <__fp_sinus>

000007fc <__divsf3>:
 7fc:	0c d0       	rcall	.+24     	; 0x816 <__divsf3x>
 7fe:	13 c1       	rjmp	.+550    	; 0xa26 <__fp_round>
 800:	e3 d0       	rcall	.+454    	; 0x9c8 <__fp_pscB>
 802:	40 f0       	brcs	.+16     	; 0x814 <__divsf3+0x18>
 804:	da d0       	rcall	.+436    	; 0x9ba <__fp_pscA>
 806:	30 f0       	brcs	.+12     	; 0x814 <__divsf3+0x18>
 808:	21 f4       	brne	.+8      	; 0x812 <__divsf3+0x16>
 80a:	5f 3f       	cpi	r21, 0xFF	; 255
 80c:	19 f0       	breq	.+6      	; 0x814 <__divsf3+0x18>
 80e:	cc c0       	rjmp	.+408    	; 0x9a8 <__fp_inf>
 810:	51 11       	cpse	r21, r1
 812:	4e c1       	rjmp	.+668    	; 0xab0 <__fp_szero>
 814:	cf c0       	rjmp	.+414    	; 0x9b4 <__fp_nan>

00000816 <__divsf3x>:
 816:	29 d1       	rcall	.+594    	; 0xa6a <__fp_split3>
 818:	98 f3       	brcs	.-26     	; 0x800 <__divsf3+0x4>

0000081a <__divsf3_pse>:
 81a:	99 23       	and	r25, r25
 81c:	c9 f3       	breq	.-14     	; 0x810 <__divsf3+0x14>
 81e:	55 23       	and	r21, r21
 820:	b1 f3       	breq	.-20     	; 0x80e <__divsf3+0x12>
 822:	95 1b       	sub	r25, r21
 824:	55 0b       	sbc	r21, r21
 826:	bb 27       	eor	r27, r27
 828:	aa 27       	eor	r26, r26
 82a:	62 17       	cp	r22, r18
 82c:	73 07       	cpc	r23, r19
 82e:	84 07       	cpc	r24, r20
 830:	38 f0       	brcs	.+14     	; 0x840 <__divsf3_pse+0x26>
 832:	9f 5f       	subi	r25, 0xFF	; 255
 834:	5f 4f       	sbci	r21, 0xFF	; 255
 836:	22 0f       	add	r18, r18
 838:	33 1f       	adc	r19, r19
 83a:	44 1f       	adc	r20, r20
 83c:	aa 1f       	adc	r26, r26
 83e:	a9 f3       	breq	.-22     	; 0x82a <__divsf3_pse+0x10>
 840:	33 d0       	rcall	.+102    	; 0x8a8 <__divsf3_pse+0x8e>
 842:	0e 2e       	mov	r0, r30
 844:	3a f0       	brmi	.+14     	; 0x854 <__divsf3_pse+0x3a>
 846:	e0 e8       	ldi	r30, 0x80	; 128
 848:	30 d0       	rcall	.+96     	; 0x8aa <__divsf3_pse+0x90>
 84a:	91 50       	subi	r25, 0x01	; 1
 84c:	50 40       	sbci	r21, 0x00	; 0
 84e:	e6 95       	lsr	r30
 850:	00 1c       	adc	r0, r0
 852:	ca f7       	brpl	.-14     	; 0x846 <__divsf3_pse+0x2c>
 854:	29 d0       	rcall	.+82     	; 0x8a8 <__divsf3_pse+0x8e>
 856:	fe 2f       	mov	r31, r30
 858:	27 d0       	rcall	.+78     	; 0x8a8 <__divsf3_pse+0x8e>
 85a:	66 0f       	add	r22, r22
 85c:	77 1f       	adc	r23, r23
 85e:	88 1f       	adc	r24, r24
 860:	bb 1f       	adc	r27, r27
 862:	26 17       	cp	r18, r22
 864:	37 07       	cpc	r19, r23
 866:	48 07       	cpc	r20, r24
 868:	ab 07       	cpc	r26, r27
 86a:	b0 e8       	ldi	r27, 0x80	; 128
 86c:	09 f0       	breq	.+2      	; 0x870 <__divsf3_pse+0x56>
 86e:	bb 0b       	sbc	r27, r27
 870:	80 2d       	mov	r24, r0
 872:	bf 01       	movw	r22, r30
 874:	ff 27       	eor	r31, r31
 876:	93 58       	subi	r25, 0x83	; 131
 878:	5f 4f       	sbci	r21, 0xFF	; 255
 87a:	2a f0       	brmi	.+10     	; 0x886 <__divsf3_pse+0x6c>
 87c:	9e 3f       	cpi	r25, 0xFE	; 254
 87e:	51 05       	cpc	r21, r1
 880:	68 f0       	brcs	.+26     	; 0x89c <__divsf3_pse+0x82>
 882:	92 c0       	rjmp	.+292    	; 0x9a8 <__fp_inf>
 884:	15 c1       	rjmp	.+554    	; 0xab0 <__fp_szero>
 886:	5f 3f       	cpi	r21, 0xFF	; 255
 888:	ec f3       	brlt	.-6      	; 0x884 <__divsf3_pse+0x6a>
 88a:	98 3e       	cpi	r25, 0xE8	; 232
 88c:	dc f3       	brlt	.-10     	; 0x884 <__divsf3_pse+0x6a>
 88e:	86 95       	lsr	r24
 890:	77 95       	ror	r23
 892:	67 95       	ror	r22
 894:	b7 95       	ror	r27
 896:	f7 95       	ror	r31
 898:	9f 5f       	subi	r25, 0xFF	; 255
 89a:	c9 f7       	brne	.-14     	; 0x88e <__divsf3_pse+0x74>
 89c:	88 0f       	add	r24, r24
 89e:	91 1d       	adc	r25, r1
 8a0:	96 95       	lsr	r25
 8a2:	87 95       	ror	r24
 8a4:	97 f9       	bld	r25, 7
 8a6:	08 95       	ret
 8a8:	e1 e0       	ldi	r30, 0x01	; 1
 8aa:	66 0f       	add	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	88 1f       	adc	r24, r24
 8b0:	bb 1f       	adc	r27, r27
 8b2:	62 17       	cp	r22, r18
 8b4:	73 07       	cpc	r23, r19
 8b6:	84 07       	cpc	r24, r20
 8b8:	ba 07       	cpc	r27, r26
 8ba:	20 f0       	brcs	.+8      	; 0x8c4 <__divsf3_pse+0xaa>
 8bc:	62 1b       	sub	r22, r18
 8be:	73 0b       	sbc	r23, r19
 8c0:	84 0b       	sbc	r24, r20
 8c2:	ba 0b       	sbc	r27, r26
 8c4:	ee 1f       	adc	r30, r30
 8c6:	88 f7       	brcc	.-30     	; 0x8aa <__divsf3_pse+0x90>
 8c8:	e0 95       	com	r30
 8ca:	08 95       	ret

000008cc <__fixsfsi>:
 8cc:	04 d0       	rcall	.+8      	; 0x8d6 <__fixunssfsi>
 8ce:	68 94       	set
 8d0:	b1 11       	cpse	r27, r1
 8d2:	ee c0       	rjmp	.+476    	; 0xab0 <__fp_szero>
 8d4:	08 95       	ret

000008d6 <__fixunssfsi>:
 8d6:	d1 d0       	rcall	.+418    	; 0xa7a <__fp_splitA>
 8d8:	88 f0       	brcs	.+34     	; 0x8fc <__fixunssfsi+0x26>
 8da:	9f 57       	subi	r25, 0x7F	; 127
 8dc:	90 f0       	brcs	.+36     	; 0x902 <__fixunssfsi+0x2c>
 8de:	b9 2f       	mov	r27, r25
 8e0:	99 27       	eor	r25, r25
 8e2:	b7 51       	subi	r27, 0x17	; 23
 8e4:	a0 f0       	brcs	.+40     	; 0x90e <__fixunssfsi+0x38>
 8e6:	d1 f0       	breq	.+52     	; 0x91c <__fixunssfsi+0x46>
 8e8:	66 0f       	add	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	88 1f       	adc	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	1a f0       	brmi	.+6      	; 0x8f8 <__fixunssfsi+0x22>
 8f2:	ba 95       	dec	r27
 8f4:	c9 f7       	brne	.-14     	; 0x8e8 <__fixunssfsi+0x12>
 8f6:	12 c0       	rjmp	.+36     	; 0x91c <__fixunssfsi+0x46>
 8f8:	b1 30       	cpi	r27, 0x01	; 1
 8fa:	81 f0       	breq	.+32     	; 0x91c <__fixunssfsi+0x46>
 8fc:	d8 d0       	rcall	.+432    	; 0xaae <__fp_zero>
 8fe:	b1 e0       	ldi	r27, 0x01	; 1
 900:	08 95       	ret
 902:	d5 c0       	rjmp	.+426    	; 0xaae <__fp_zero>
 904:	67 2f       	mov	r22, r23
 906:	78 2f       	mov	r23, r24
 908:	88 27       	eor	r24, r24
 90a:	b8 5f       	subi	r27, 0xF8	; 248
 90c:	39 f0       	breq	.+14     	; 0x91c <__fixunssfsi+0x46>
 90e:	b9 3f       	cpi	r27, 0xF9	; 249
 910:	cc f3       	brlt	.-14     	; 0x904 <__fixunssfsi+0x2e>
 912:	86 95       	lsr	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b3 95       	inc	r27
 91a:	d9 f7       	brne	.-10     	; 0x912 <__fixunssfsi+0x3c>
 91c:	3e f4       	brtc	.+14     	; 0x92c <__fixunssfsi+0x56>
 91e:	90 95       	com	r25
 920:	80 95       	com	r24
 922:	70 95       	com	r23
 924:	61 95       	neg	r22
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	8f 4f       	sbci	r24, 0xFF	; 255
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	08 95       	ret

0000092e <__floatunsisf>:
 92e:	e8 94       	clt
 930:	09 c0       	rjmp	.+18     	; 0x944 <__floatsisf+0x12>

00000932 <__floatsisf>:
 932:	97 fb       	bst	r25, 7
 934:	3e f4       	brtc	.+14     	; 0x944 <__floatsisf+0x12>
 936:	90 95       	com	r25
 938:	80 95       	com	r24
 93a:	70 95       	com	r23
 93c:	61 95       	neg	r22
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	99 23       	and	r25, r25
 946:	a9 f0       	breq	.+42     	; 0x972 <__floatsisf+0x40>
 948:	f9 2f       	mov	r31, r25
 94a:	96 e9       	ldi	r25, 0x96	; 150
 94c:	bb 27       	eor	r27, r27
 94e:	93 95       	inc	r25
 950:	f6 95       	lsr	r31
 952:	87 95       	ror	r24
 954:	77 95       	ror	r23
 956:	67 95       	ror	r22
 958:	b7 95       	ror	r27
 95a:	f1 11       	cpse	r31, r1
 95c:	f8 cf       	rjmp	.-16     	; 0x94e <__floatsisf+0x1c>
 95e:	fa f4       	brpl	.+62     	; 0x99e <__floatsisf+0x6c>
 960:	bb 0f       	add	r27, r27
 962:	11 f4       	brne	.+4      	; 0x968 <__floatsisf+0x36>
 964:	60 ff       	sbrs	r22, 0
 966:	1b c0       	rjmp	.+54     	; 0x99e <__floatsisf+0x6c>
 968:	6f 5f       	subi	r22, 0xFF	; 255
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	16 c0       	rjmp	.+44     	; 0x99e <__floatsisf+0x6c>
 972:	88 23       	and	r24, r24
 974:	11 f0       	breq	.+4      	; 0x97a <__floatsisf+0x48>
 976:	96 e9       	ldi	r25, 0x96	; 150
 978:	11 c0       	rjmp	.+34     	; 0x99c <__floatsisf+0x6a>
 97a:	77 23       	and	r23, r23
 97c:	21 f0       	breq	.+8      	; 0x986 <__floatsisf+0x54>
 97e:	9e e8       	ldi	r25, 0x8E	; 142
 980:	87 2f       	mov	r24, r23
 982:	76 2f       	mov	r23, r22
 984:	05 c0       	rjmp	.+10     	; 0x990 <__floatsisf+0x5e>
 986:	66 23       	and	r22, r22
 988:	71 f0       	breq	.+28     	; 0x9a6 <__floatsisf+0x74>
 98a:	96 e8       	ldi	r25, 0x86	; 134
 98c:	86 2f       	mov	r24, r22
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	2a f0       	brmi	.+10     	; 0x99e <__floatsisf+0x6c>
 994:	9a 95       	dec	r25
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	da f7       	brpl	.-10     	; 0x994 <__floatsisf+0x62>
 99e:	88 0f       	add	r24, r24
 9a0:	96 95       	lsr	r25
 9a2:	87 95       	ror	r24
 9a4:	97 f9       	bld	r25, 7
 9a6:	08 95       	ret

000009a8 <__fp_inf>:
 9a8:	97 f9       	bld	r25, 7
 9aa:	9f 67       	ori	r25, 0x7F	; 127
 9ac:	80 e8       	ldi	r24, 0x80	; 128
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	08 95       	ret

000009b4 <__fp_nan>:
 9b4:	9f ef       	ldi	r25, 0xFF	; 255
 9b6:	80 ec       	ldi	r24, 0xC0	; 192
 9b8:	08 95       	ret

000009ba <__fp_pscA>:
 9ba:	00 24       	eor	r0, r0
 9bc:	0a 94       	dec	r0
 9be:	16 16       	cp	r1, r22
 9c0:	17 06       	cpc	r1, r23
 9c2:	18 06       	cpc	r1, r24
 9c4:	09 06       	cpc	r0, r25
 9c6:	08 95       	ret

000009c8 <__fp_pscB>:
 9c8:	00 24       	eor	r0, r0
 9ca:	0a 94       	dec	r0
 9cc:	12 16       	cp	r1, r18
 9ce:	13 06       	cpc	r1, r19
 9d0:	14 06       	cpc	r1, r20
 9d2:	05 06       	cpc	r0, r21
 9d4:	08 95       	ret
 9d6:	ee cf       	rjmp	.-36     	; 0x9b4 <__fp_nan>

000009d8 <__fp_rempio2>:
 9d8:	50 d0       	rcall	.+160    	; 0xa7a <__fp_splitA>
 9da:	e8 f3       	brcs	.-6      	; 0x9d6 <__fp_pscB+0xe>
 9dc:	e8 94       	clt
 9de:	e0 e0       	ldi	r30, 0x00	; 0
 9e0:	bb 27       	eor	r27, r27
 9e2:	9f 57       	subi	r25, 0x7F	; 127
 9e4:	f0 f0       	brcs	.+60     	; 0xa22 <__fp_rempio2+0x4a>
 9e6:	2a ed       	ldi	r18, 0xDA	; 218
 9e8:	3f e0       	ldi	r19, 0x0F	; 15
 9ea:	49 ec       	ldi	r20, 0xC9	; 201
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <__fp_rempio2+0x22>
 9ee:	ee 0f       	add	r30, r30
 9f0:	bb 0f       	add	r27, r27
 9f2:	66 1f       	adc	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	28 f0       	brcs	.+10     	; 0xa04 <__fp_rempio2+0x2c>
 9fa:	b2 3a       	cpi	r27, 0xA2	; 162
 9fc:	62 07       	cpc	r22, r18
 9fe:	73 07       	cpc	r23, r19
 a00:	84 07       	cpc	r24, r20
 a02:	28 f0       	brcs	.+10     	; 0xa0e <__fp_rempio2+0x36>
 a04:	b2 5a       	subi	r27, 0xA2	; 162
 a06:	62 0b       	sbc	r22, r18
 a08:	73 0b       	sbc	r23, r19
 a0a:	84 0b       	sbc	r24, r20
 a0c:	e3 95       	inc	r30
 a0e:	9a 95       	dec	r25
 a10:	72 f7       	brpl	.-36     	; 0x9ee <__fp_rempio2+0x16>
 a12:	80 38       	cpi	r24, 0x80	; 128
 a14:	30 f4       	brcc	.+12     	; 0xa22 <__fp_rempio2+0x4a>
 a16:	9a 95       	dec	r25
 a18:	bb 0f       	add	r27, r27
 a1a:	66 1f       	adc	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	d2 f7       	brpl	.-12     	; 0xa16 <__fp_rempio2+0x3e>
 a22:	90 48       	sbci	r25, 0x80	; 128
 a24:	b6 c0       	rjmp	.+364    	; 0xb92 <__fp_mpack_finite>

00000a26 <__fp_round>:
 a26:	09 2e       	mov	r0, r25
 a28:	03 94       	inc	r0
 a2a:	00 0c       	add	r0, r0
 a2c:	11 f4       	brne	.+4      	; 0xa32 <__fp_round+0xc>
 a2e:	88 23       	and	r24, r24
 a30:	52 f0       	brmi	.+20     	; 0xa46 <__fp_round+0x20>
 a32:	bb 0f       	add	r27, r27
 a34:	40 f4       	brcc	.+16     	; 0xa46 <__fp_round+0x20>
 a36:	bf 2b       	or	r27, r31
 a38:	11 f4       	brne	.+4      	; 0xa3e <__fp_round+0x18>
 a3a:	60 ff       	sbrs	r22, 0
 a3c:	04 c0       	rjmp	.+8      	; 0xa46 <__fp_round+0x20>
 a3e:	6f 5f       	subi	r22, 0xFF	; 255
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	08 95       	ret

00000a48 <__fp_sinus>:
 a48:	ef 93       	push	r30
 a4a:	e0 ff       	sbrs	r30, 0
 a4c:	06 c0       	rjmp	.+12     	; 0xa5a <__fp_sinus+0x12>
 a4e:	a2 ea       	ldi	r26, 0xA2	; 162
 a50:	2a ed       	ldi	r18, 0xDA	; 218
 a52:	3f e0       	ldi	r19, 0x0F	; 15
 a54:	49 ec       	ldi	r20, 0xC9	; 201
 a56:	5f eb       	ldi	r21, 0xBF	; 191
 a58:	7b de       	rcall	.-778    	; 0x750 <__addsf3x>
 a5a:	e5 df       	rcall	.-54     	; 0xa26 <__fp_round>
 a5c:	0f 90       	pop	r0
 a5e:	03 94       	inc	r0
 a60:	01 fc       	sbrc	r0, 1
 a62:	90 58       	subi	r25, 0x80	; 128
 a64:	e4 ee       	ldi	r30, 0xE4	; 228
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	a0 c0       	rjmp	.+320    	; 0xbaa <__fp_powsodd>

00000a6a <__fp_split3>:
 a6a:	57 fd       	sbrc	r21, 7
 a6c:	90 58       	subi	r25, 0x80	; 128
 a6e:	44 0f       	add	r20, r20
 a70:	55 1f       	adc	r21, r21
 a72:	59 f0       	breq	.+22     	; 0xa8a <__fp_splitA+0x10>
 a74:	5f 3f       	cpi	r21, 0xFF	; 255
 a76:	71 f0       	breq	.+28     	; 0xa94 <__fp_splitA+0x1a>
 a78:	47 95       	ror	r20

00000a7a <__fp_splitA>:
 a7a:	88 0f       	add	r24, r24
 a7c:	97 fb       	bst	r25, 7
 a7e:	99 1f       	adc	r25, r25
 a80:	61 f0       	breq	.+24     	; 0xa9a <__fp_splitA+0x20>
 a82:	9f 3f       	cpi	r25, 0xFF	; 255
 a84:	79 f0       	breq	.+30     	; 0xaa4 <__fp_splitA+0x2a>
 a86:	87 95       	ror	r24
 a88:	08 95       	ret
 a8a:	12 16       	cp	r1, r18
 a8c:	13 06       	cpc	r1, r19
 a8e:	14 06       	cpc	r1, r20
 a90:	55 1f       	adc	r21, r21
 a92:	f2 cf       	rjmp	.-28     	; 0xa78 <__fp_split3+0xe>
 a94:	46 95       	lsr	r20
 a96:	f1 df       	rcall	.-30     	; 0xa7a <__fp_splitA>
 a98:	08 c0       	rjmp	.+16     	; 0xaaa <__fp_splitA+0x30>
 a9a:	16 16       	cp	r1, r22
 a9c:	17 06       	cpc	r1, r23
 a9e:	18 06       	cpc	r1, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	f1 cf       	rjmp	.-30     	; 0xa86 <__fp_splitA+0xc>
 aa4:	86 95       	lsr	r24
 aa6:	71 05       	cpc	r23, r1
 aa8:	61 05       	cpc	r22, r1
 aaa:	08 94       	sec
 aac:	08 95       	ret

00000aae <__fp_zero>:
 aae:	e8 94       	clt

00000ab0 <__fp_szero>:
 ab0:	bb 27       	eor	r27, r27
 ab2:	66 27       	eor	r22, r22
 ab4:	77 27       	eor	r23, r23
 ab6:	cb 01       	movw	r24, r22
 ab8:	97 f9       	bld	r25, 7
 aba:	08 95       	ret

00000abc <__mulsf3>:
 abc:	0b d0       	rcall	.+22     	; 0xad4 <__mulsf3x>
 abe:	b3 cf       	rjmp	.-154    	; 0xa26 <__fp_round>
 ac0:	7c df       	rcall	.-264    	; 0x9ba <__fp_pscA>
 ac2:	28 f0       	brcs	.+10     	; 0xace <__mulsf3+0x12>
 ac4:	81 df       	rcall	.-254    	; 0x9c8 <__fp_pscB>
 ac6:	18 f0       	brcs	.+6      	; 0xace <__mulsf3+0x12>
 ac8:	95 23       	and	r25, r21
 aca:	09 f0       	breq	.+2      	; 0xace <__mulsf3+0x12>
 acc:	6d cf       	rjmp	.-294    	; 0x9a8 <__fp_inf>
 ace:	72 cf       	rjmp	.-284    	; 0x9b4 <__fp_nan>
 ad0:	11 24       	eor	r1, r1
 ad2:	ee cf       	rjmp	.-36     	; 0xab0 <__fp_szero>

00000ad4 <__mulsf3x>:
 ad4:	ca df       	rcall	.-108    	; 0xa6a <__fp_split3>
 ad6:	a0 f3       	brcs	.-24     	; 0xac0 <__mulsf3+0x4>

00000ad8 <__mulsf3_pse>:
 ad8:	95 9f       	mul	r25, r21
 ada:	d1 f3       	breq	.-12     	; 0xad0 <__mulsf3+0x14>
 adc:	95 0f       	add	r25, r21
 ade:	50 e0       	ldi	r21, 0x00	; 0
 ae0:	55 1f       	adc	r21, r21
 ae2:	62 9f       	mul	r22, r18
 ae4:	f0 01       	movw	r30, r0
 ae6:	72 9f       	mul	r23, r18
 ae8:	bb 27       	eor	r27, r27
 aea:	f0 0d       	add	r31, r0
 aec:	b1 1d       	adc	r27, r1
 aee:	63 9f       	mul	r22, r19
 af0:	aa 27       	eor	r26, r26
 af2:	f0 0d       	add	r31, r0
 af4:	b1 1d       	adc	r27, r1
 af6:	aa 1f       	adc	r26, r26
 af8:	64 9f       	mul	r22, r20
 afa:	66 27       	eor	r22, r22
 afc:	b0 0d       	add	r27, r0
 afe:	a1 1d       	adc	r26, r1
 b00:	66 1f       	adc	r22, r22
 b02:	82 9f       	mul	r24, r18
 b04:	22 27       	eor	r18, r18
 b06:	b0 0d       	add	r27, r0
 b08:	a1 1d       	adc	r26, r1
 b0a:	62 1f       	adc	r22, r18
 b0c:	73 9f       	mul	r23, r19
 b0e:	b0 0d       	add	r27, r0
 b10:	a1 1d       	adc	r26, r1
 b12:	62 1f       	adc	r22, r18
 b14:	83 9f       	mul	r24, r19
 b16:	a0 0d       	add	r26, r0
 b18:	61 1d       	adc	r22, r1
 b1a:	22 1f       	adc	r18, r18
 b1c:	74 9f       	mul	r23, r20
 b1e:	33 27       	eor	r19, r19
 b20:	a0 0d       	add	r26, r0
 b22:	61 1d       	adc	r22, r1
 b24:	23 1f       	adc	r18, r19
 b26:	84 9f       	mul	r24, r20
 b28:	60 0d       	add	r22, r0
 b2a:	21 1d       	adc	r18, r1
 b2c:	82 2f       	mov	r24, r18
 b2e:	76 2f       	mov	r23, r22
 b30:	6a 2f       	mov	r22, r26
 b32:	11 24       	eor	r1, r1
 b34:	9f 57       	subi	r25, 0x7F	; 127
 b36:	50 40       	sbci	r21, 0x00	; 0
 b38:	8a f0       	brmi	.+34     	; 0xb5c <__mulsf3_pse+0x84>
 b3a:	e1 f0       	breq	.+56     	; 0xb74 <__mulsf3_pse+0x9c>
 b3c:	88 23       	and	r24, r24
 b3e:	4a f0       	brmi	.+18     	; 0xb52 <__mulsf3_pse+0x7a>
 b40:	ee 0f       	add	r30, r30
 b42:	ff 1f       	adc	r31, r31
 b44:	bb 1f       	adc	r27, r27
 b46:	66 1f       	adc	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	91 50       	subi	r25, 0x01	; 1
 b4e:	50 40       	sbci	r21, 0x00	; 0
 b50:	a9 f7       	brne	.-22     	; 0xb3c <__mulsf3_pse+0x64>
 b52:	9e 3f       	cpi	r25, 0xFE	; 254
 b54:	51 05       	cpc	r21, r1
 b56:	70 f0       	brcs	.+28     	; 0xb74 <__mulsf3_pse+0x9c>
 b58:	27 cf       	rjmp	.-434    	; 0x9a8 <__fp_inf>
 b5a:	aa cf       	rjmp	.-172    	; 0xab0 <__fp_szero>
 b5c:	5f 3f       	cpi	r21, 0xFF	; 255
 b5e:	ec f3       	brlt	.-6      	; 0xb5a <__mulsf3_pse+0x82>
 b60:	98 3e       	cpi	r25, 0xE8	; 232
 b62:	dc f3       	brlt	.-10     	; 0xb5a <__mulsf3_pse+0x82>
 b64:	86 95       	lsr	r24
 b66:	77 95       	ror	r23
 b68:	67 95       	ror	r22
 b6a:	b7 95       	ror	r27
 b6c:	f7 95       	ror	r31
 b6e:	e7 95       	ror	r30
 b70:	9f 5f       	subi	r25, 0xFF	; 255
 b72:	c1 f7       	brne	.-16     	; 0xb64 <__mulsf3_pse+0x8c>
 b74:	fe 2b       	or	r31, r30
 b76:	88 0f       	add	r24, r24
 b78:	91 1d       	adc	r25, r1
 b7a:	96 95       	lsr	r25
 b7c:	87 95       	ror	r24
 b7e:	97 f9       	bld	r25, 7
 b80:	08 95       	ret

00000b82 <sin>:
 b82:	9f 93       	push	r25
 b84:	29 df       	rcall	.-430    	; 0x9d8 <__fp_rempio2>
 b86:	0f 90       	pop	r0
 b88:	07 fc       	sbrc	r0, 7
 b8a:	ee 5f       	subi	r30, 0xFE	; 254
 b8c:	5d cf       	rjmp	.-326    	; 0xa48 <__fp_sinus>

00000b8e <__fp_mpack>:
 b8e:	9f 3f       	cpi	r25, 0xFF	; 255
 b90:	31 f0       	breq	.+12     	; 0xb9e <__fp_mpack_finite+0xc>

00000b92 <__fp_mpack_finite>:
 b92:	91 50       	subi	r25, 0x01	; 1
 b94:	20 f4       	brcc	.+8      	; 0xb9e <__fp_mpack_finite+0xc>
 b96:	87 95       	ror	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b7 95       	ror	r27
 b9e:	88 0f       	add	r24, r24
 ba0:	91 1d       	adc	r25, r1
 ba2:	96 95       	lsr	r25
 ba4:	87 95       	ror	r24
 ba6:	97 f9       	bld	r25, 7
 ba8:	08 95       	ret

00000baa <__fp_powsodd>:
 baa:	9f 93       	push	r25
 bac:	8f 93       	push	r24
 bae:	7f 93       	push	r23
 bb0:	6f 93       	push	r22
 bb2:	ff 93       	push	r31
 bb4:	ef 93       	push	r30
 bb6:	9b 01       	movw	r18, r22
 bb8:	ac 01       	movw	r20, r24
 bba:	80 df       	rcall	.-256    	; 0xabc <__mulsf3>
 bbc:	ef 91       	pop	r30
 bbe:	ff 91       	pop	r31
 bc0:	05 d0       	rcall	.+10     	; 0xbcc <__fp_powser>
 bc2:	2f 91       	pop	r18
 bc4:	3f 91       	pop	r19
 bc6:	4f 91       	pop	r20
 bc8:	5f 91       	pop	r21
 bca:	78 cf       	rjmp	.-272    	; 0xabc <__mulsf3>

00000bcc <__fp_powser>:
 bcc:	df 93       	push	r29
 bce:	cf 93       	push	r28
 bd0:	1f 93       	push	r17
 bd2:	0f 93       	push	r16
 bd4:	ff 92       	push	r15
 bd6:	ef 92       	push	r14
 bd8:	df 92       	push	r13
 bda:	7b 01       	movw	r14, r22
 bdc:	8c 01       	movw	r16, r24
 bde:	68 94       	set
 be0:	05 c0       	rjmp	.+10     	; 0xbec <__fp_powser+0x20>
 be2:	da 2e       	mov	r13, r26
 be4:	ef 01       	movw	r28, r30
 be6:	76 df       	rcall	.-276    	; 0xad4 <__mulsf3x>
 be8:	fe 01       	movw	r30, r28
 bea:	e8 94       	clt
 bec:	a5 91       	lpm	r26, Z+
 bee:	25 91       	lpm	r18, Z+
 bf0:	35 91       	lpm	r19, Z+
 bf2:	45 91       	lpm	r20, Z+
 bf4:	55 91       	lpm	r21, Z+
 bf6:	ae f3       	brts	.-22     	; 0xbe2 <__fp_powser+0x16>
 bf8:	ef 01       	movw	r28, r30
 bfa:	aa dd       	rcall	.-1196   	; 0x750 <__addsf3x>
 bfc:	fe 01       	movw	r30, r28
 bfe:	97 01       	movw	r18, r14
 c00:	a8 01       	movw	r20, r16
 c02:	da 94       	dec	r13
 c04:	79 f7       	brne	.-34     	; 0xbe4 <__fp_powser+0x18>
 c06:	df 90       	pop	r13
 c08:	ef 90       	pop	r14
 c0a:	ff 90       	pop	r15
 c0c:	0f 91       	pop	r16
 c0e:	1f 91       	pop	r17
 c10:	cf 91       	pop	r28
 c12:	df 91       	pop	r29
 c14:	08 95       	ret

00000c16 <_exit>:
 c16:	f8 94       	cli

00000c18 <__stop_program>:
 c18:	ff cf       	rjmp	.-2      	; 0xc18 <__stop_program>
